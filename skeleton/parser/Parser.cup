package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;

import ast.*;
import interpreter.Interpreter;

parser code {: 
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

  ast.Location loc(int line, int column) {
    return new ast.Location(line, column);
  }

:};

terminal RET, SEMICOL, LBRACKET, RBRACKET;
terminal PRINT, IF, ELSE, COMMA;
terminal PLUS, MINUS, TIMES, UMINUS, LPAREN, RPAREN;
terminal LE, GE, EQ, NE, LT, GT, AND, OR, NOT;
terminal Long INTCONST;
terminal String IDENT;

terminal INT;

non terminal Program          program;
non terminal FuncDefList      funcDefList;
non terminal FuncDef          funcDef;
non terminal VarDecl          varDecl;
non terminal Type             type;
non terminal FormalDeclList   formalDeclList;
non terminal NeFormalDeclList neFormalDeclList;
non terminal StmtList         stmtList;
non terminal Stmt             stmt;
non terminal Expr             expr;
non terminal BinaryExpr       binaryExpr;
non terminal Cond             cond;

precedence left IF, ELSE;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;
precedence left LE, GE, EQ, NE, LT, GT, AND, OR, NOT;

start with program;

program ::= funcDefList:l
            {: RESULT = new Program(l, loc(lleft, lright)); :}
         ;

funcDefList ::= funcDef:f funcDefList:l
                {: RESULT = new FuncDefList(f, l, loc(fleft, fright)); :}
            |
                {: RESULT = null; :}
            ;

funcDef ::= varDecl:v LPAREN formalDeclList:l RPAREN LBRACKET stmtList:s RBRACKET
            {: RESULT = new FuncDef(v, l, s, loc(vleft, vright)); :}
         ;

varDecl ::= type:t IDENT:i
            {: RESULT = new VarDecl(t, i, loc(tleft, tright)); :}
         ;

type ::= INT
         {: RESULT = new Type(Type.INT); :}
      ;

formalDeclList ::= neFormalDeclList:l
                   {: RESULT = new FormalDeclList(l, loc(lleft, lright)); :}
               |
                   {: RESULT = null; :}
               ;

neFormalDeclList ::= varDecl:v COMMA neFormalDeclList:l
                     {: RESULT = new NeFormalDeclList(v, l, loc(vleft, vright)); :}
                  |  varDecl:v
                     {: RESULT = new NeFormalDeclList(v, null, loc(vleft,vright)); :}
                  ;

stmtList ::= stmt:s stmtList:l
             {: RESULT = new StmtList(s, l, loc(sleft, sright)); :}
         |   
             {: RESULT = null; :}
         ;

stmt ::= IF LPAREN cond:c RPAREN stmt:s
            {: RESULT = new IfStmt(c, s, loc(cleft, cright)); :}
         |  IF LPAREN cond:c RPAREN stmt:t ELSE stmt:e
            {: RESULT = new IfElseStmt(c, t, e, loc(cleft, cright)); :}
         |  PRINT expr:e SEMICOL
            {: RESULT = new PrintStmt(e, loc(eleft, eright)); :}
         |  RET expr:e SEMICOL
            {: RESULT = new ReturnStmt(e, loc(eleft, eright)); :}
         |  LBRACKET stmtList:l RBRACKET
            {: RESULT = new BracketStmt(l, loc(lleft, lright)); :}
         ;

expr ::= INTCONST:c
         {: RESULT = new ConstExpr(c, loc(cleft, cright)); :}
      |  IDENT:c
         {: RESULT = new IdentExpr(c, loc(cleft, cright)); :}
      |  binaryExpr:e
         {: RESULT = e; :}
      |  MINUS expr:e
         {: RESULT = new UnaryExpr(UnaryExpr.NEGATION, e, loc(eleft, eright)); :}
         %prec UMINUS
      |  LPAREN expr:e RPAREN
         {: RESULT = e; :}
      ;

binaryExpr ::= expr:e1 PLUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 MINUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.MINUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 TIMES expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.TIMES, e2, loc(e1left, e1right)); :}
            ;

cond ::= expr:e1 LE expr:e2
         {: RESULT = new BinaryCond(e1, BinaryCond.LE, e2, loc(e1left, e1right)); :}
      | expr:e1 GE expr:e2
         {: RESULT = new BinaryCond(e1, BinaryCond.GE, e2, loc(e1left, e1right)); :}
      | expr:e1 EQ expr:e2
         {: RESULT = new BinaryCond(e1, BinaryCond.EQ, e2, loc(e1left, e1right)); :}
      | expr:e1 NE expr:e2
         {: RESULT = new BinaryCond(e1, BinaryCond.NE, e2, loc(e1left, e1right)); :}
      | expr:e1 LT expr:e2
         {: RESULT = new BinaryCond(e1, BinaryCond.LT, e2, loc(e1left, e1right)); :}
      | expr:e1 GT expr:e2
         {: RESULT = new BinaryCond(e1, BinaryCond.GT, e2, loc(e1left, e1right)); :}
      | cond:c1 AND cond:c2
         {: RESULT = new LogicalCond(c1, LogicalCond.AND, c2, loc(c1left, c1right)); :}
      | cond:c1 OR cond:c2
         {: RESULT = new LogicalCond(c1, LogicalCond.OR, c2, loc(c1left, c1right)); :}
      | NOT cond:c
         {: RESULT = new UnaryCond(UnaryCond.NOT, c, loc(cleft, cright)); :}
      | LPAREN cond:c RPAREN
         {: RESULT = c; :}
      ;
